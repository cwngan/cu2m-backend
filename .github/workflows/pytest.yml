name: Test with Pytest in Docker Compose

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MONGO_DB_USERNAME: ${{ secrets.MONGO_DB_USERNAME }}
      MONGO_DB_PASSWORD: ${{ secrets.MONGO_DB_PASSWORD }}
      MONGO_DB_HOST: localhost
      MONGO_DB_PORT: 27017
      COURSE_DATA_FILENAME: ${{ vars.COURSE_DATA_FILENAME }}
    steps:
      - uses: actions/checkout@v4

      - name: Restore Mongo Image Cache if it exists
        id: cache-docker-mongo
        uses: actions/cache@v3
        with:
          path: ci/cache/docker/mongo
          key: cache-docker-mongo-8.0.9

      - name: Update Mongo Image Cache if cache miss
        if: steps.cache-docker-mongo.outputs.cache-hit != 'true'
        run: |
          docker pull mongo:8.0.9
          mkdir -p ci/cache/docker/mongo
          docker image save mongo:8.0.9 --output ./ci/cache/docker/mongo/mongo-8.0.9.tar

      - name: Use Mongo Image Cache if cache hit
        if: steps.cache-docker-mongo.outputs.cache-hit == 'true'
        run: docker image load --input ./ci/cache/docker/mongo/mongo-8.0.9.tar

      - name: docker compose up
        run: docker compose up -d mongodb

      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'poetry'
      - name: install dependencies and run tests
        run: |
          poetry env use 3.12
          poetry install
          poetry run pytest --log-cli-level=INFO
